@using bikeRental.Application;
@model PaginatedList<bikeRental.Application.Models.User.UserModel>
@{
    ViewData["Title"] = "Customers";
}

<h2>Stations</h2>

@ViewData["CurrentCategory"]

<div class="container">
    <div class="row justify-content-between">
        <div class="col-6">
        <form asp-controller="Users" asp-action="GetAll" asp-route-currentCategory="@ViewData["CurrentCategory"]" method="get">
            <div class="input-group">
                     <input type="text" placeholder="Start typing address…" name="SearchString" value="@ViewData["CurrentFilter"]" class="form-control"/>
                     <div class="input-group-append">
                         <button type="submit" class="btn btn-warning">Search <i class="bi bi-bicycle"></i></button>
                         <a class="btn btn-light" asp-action="GetAll">Back to Full List</a>
                     </div>
            </div>
        </form>
        </div>
        <div class="col-4">
        @if (User.Identity!.IsAuthenticated && User.IsInRole("Administrator"))
        {
            <div>

                <a class="btn btn-outline-success" asp-controller="Users" asp-action="Create"><i class="bi bi-house-add"> Create new user</i></a>
            </div>
        }
        </div>
    </div>
</div>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>
                 @Html.DisplayNameFor(modelItem => modelItem[0].UserName)
            </th>
            <th>
                 @Html.DisplayNameFor(modelItem => modelItem[0].FirstName)
            </th>
            <th>
                 @Html.DisplayNameFor(modelItem => modelItem[0].LastName)
            </th>
            <th>
                 @Html.DisplayNameFor(modelItem => modelItem[0].Email)
            </th>
            <th>
                 @Html.DisplayNameFor(modelItem => modelItem[0].Role)
            </th>
            @if (User.Identity!.IsAuthenticated && User.IsInRole("Administrator"))
            {   
                  <th>
                     Edit/Delete
                  </th>       
            }
        </tr>        
    </thead>
    <tbody>
        @foreach (var user in Model)
        {
            <tr>
                <td>@user.UserName</td>
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.Email</td>
                <td>@user.Role</td>
                @if (User.Identity!.IsAuthenticated && User.IsInRole("Administrator"))
                {
                    <td>
                        <a class="btn btn-outline-primary" asp-controller="Users" asp-action="Edit" asp-route-id="@user.Id"><i class="bi bi-pen"></i></a> 
                        <a class="btn btn-outline-danger" asp-controller="Users" asp-action="Delete" asp-route-id="@user.Id"><i class="bi bi-trash"></i></a>
                    </td> 
                }
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
    asp-controller="Users"
   asp-route-currentCategory="@ViewData["CurrentCategory"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
    asp-controller="Users"
   asp-route-currentCategory="@ViewData["CurrentCategory"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
