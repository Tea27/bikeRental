@using bikeRental.Application;
@using bikeRental.Application.Models.Order;
@model PaginatedList<bikeRental.Application.Models.Order.OrderResponse>


@{
    ViewData["Title"] = "Orders";
}

@ViewData["CurrentCategory"]
<div class="container px-4 pt-2">
    <h2>Orders</h2>
    <div class="container">
        <div class="row justify-content-between">
            <div class="col-6">
                <form asp-controller="Orders" asp-action="UserIndex" asp-route-currentCategory="@ViewData["CurrentCategory"]" method="get">
                    <div class="input-group">
@*
                        <input type="datetime-local" name="SearchDate" value="@ViewData["CurrentFilter"]" class="form-control" />
                        <div class="input-group-append">
                            <button type="submit" class="btn btn-warning">Search <i class="bi bi-bicycle"></i></button>
                            <a class="btn btn-light" asp-action="UserIndex">Back to Full List</a>
                        </div>*@
                    </div>
                </form>
            </div>
           @* <div class="col-4">
                @if (User.Identity!.IsAuthenticated && User.IsInRole("Administrator"))
                {
                    <div>

                        <a class="btn btn-outline-success" asp-controller="Orders" asp-action="Create"><i class="bi bi-house-add"> Create new Order</i></a>
                    </div>
                }
            </div>*@
        </div>
    </div>

    <table class="table table-hover mt-5 ">
        <tr>
            @foreach (var prop in typeof(OrderResponse).GetProperties())
            {
                @if (prop.Name != "Id")
                {
                    <th>
                        @prop.Name
                        @if (prop.Name == "RentalPrice")
                        {
                            <a style="color:black" asp-action="UserIndex" asp-route-sortOrder=@($"{prop.Name}Desc")><i class="bi bi-caret-up-fill"></i></a>
                            <a style="color:black" asp-action="UserIndex" asp-route-sortOrder=@($"{prop.Name}")><i class="bi bi-caret-down-fill"></i></a>
                        }                    
                    </th>
                }
            }

            @if (User.Identity!.IsAuthenticated)
            {
                <th>
                    Delete
                </th>
            }
           
            <th>
               Status
            </th>
            

        </tr>
        @foreach (var item in Model)
        {
            <tr>
                @if ((decimal)item.RentalPrice != (decimal)0.00)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.RentalStartTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RentalEndTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RentalPrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Customer.UserName)
                    </td>
                  
                    <td>
                        @Html.DisplayFor(modelItem => item.Bicycle.Description)
                    </td>

                    @if (User.Identity!.IsAuthenticated)
                    {
                        <td>
                           @* <a class="btn btn-outline-primary" asp-controller="Orders" asp-action="Edit" asp-route-id="@item.Id"><i class="bi bi-pen"></i></a>*@
@*                            <a class="btn btn-outline-danger" asp-controller="Orders" asp-action="Delete" asp-route-id="@item.Id" asp-route-bicycleId="@item.Bicycle.Id" asp-route-customerId="@item.Customer.Id"><i class="bi bi-trash"></i></a>
*@                        </td>
                    }
                    <td>
                        <i class="bi bi-check2-circle"></i>
                    </td>
                }
                else
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.RentalStartTime)
                    </td>
                    <td>
                        <i class="bi bi-clock"></i>
                    </td>
                    <td>
                        <i class="bi bi-dash"></i>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Customer.UserName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Bicycle.Description)
                    </td>

                    if (User.Identity!.IsAuthenticated)
                    {
                        <td>
                            <i class="bi bi-dash"></i>
                        </td>
                    }
                    <td>
                        <a class="btn btn-outline-danger" asp-controller="Orders" asp-action="Finish" asp-route-orderId="@item.Id" asp-route-bicycleId="@item.Bicycle.Id" asp-route-stationId="@item.Bicycle.Station.Id"><i class="bi bi-stop"></i>
                    </a>
                    </td>
                }

            </tr>
        }
    </table>

    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }

    <a asp-action="UserIndex"
       asp-controller="Orders"
       asp-route-currentCategory="@ViewData["CurrentCategory"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-sortOrder="@ViewData["SortOrder"]"
       class="btn btn-default @prevDisabled">
        Previous
    </a>
    <a asp-action="UserIndex"
       asp-controller="Orders"
       asp-route-currentCategory="@ViewData["CurrentCategory"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-sortOrder="@ViewData["SortOrder"]"
       class="btn btn-default @nextDisabled">
        Next
    </a>
</div>

